#include <iostream>

#define SIZE 5 // Size of the circular stack

class CircularStack {
private:
    int arr[SIZE];
    int front, rear;

public:
    CircularStack() {
        front = rear = -1; // Initialize front and rear pointers
    }

    bool isFull() {
        return (front == 0 && rear == SIZE - 1) || (rear == (front - 1) % (SIZE - 1));
    }

    bool isEmpty() {
        return front == -1;
    }

    void push(int value) {
        if (isFull()) {
            std::cout << "Stack Overflow\n";
            return;
        }

        if (front == -1) // If stack is initially empty
            front = rear = 0;
        else if (rear == SIZE - 1) // If rear has reached end, wrap around
            rear = 0;
        else
            rear++;

        arr[rear] = value;
    }

    int pop() {
        if (isEmpty()) {
            std::cout << "Stack Underflow\n";
            return -1;
        }

        int poppedValue = arr[front];

        if (front == rear) // If only one element is present
            front = rear = -1;
        else if (front == SIZE - 1) // If front has reached end, wrap around
            front = 0;
        else
            front++;

        return poppedValue;
    }

    void display() {
        if (isEmpty()) {
            std::cout << "Stack is empty\n";
            return;
        }

        std::cout << "Elements in the circular stack are: ";
        if (rear >= front) {
            for (int i = front; i <= rear; i++)
                std::cout << arr[i] << " ";
        } else {
            for (int i = front; i < SIZE; i++)
                std::cout << arr[i] << " ";

            for (int i = 0; i <= rear; i++)
                std::cout << arr[i] << " ";
        }
        std::cout << std::endl;
    }
};

int main() {
    CircularStack stack;

    stack.push(1);
    stack.push(2);
    stack.push(3);
    stack.push(4);
    stack.push(5);
    stack.display();

    std::cout << "Popped element: " << stack.pop() << std::endl;
    stack.display();

    stack.push(6);
    stack.display();

    return 0;
}
